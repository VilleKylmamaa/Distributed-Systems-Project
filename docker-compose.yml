version: '3.9'
name: 'distr_chat'
services:

  application_server_1:
    container_name: Application_Server_1
    build:
      dockerfile: ./Application Server/Dockerfile_for_Compose
    volumes:
      - ./Application Server:/application_server_1/src
    networks:
      distr_network:
        ipv4_address: 177.17.0.20
    ports:
      - '5001:80'
    depends_on:
      - redis_cluster

  application_server_2:
    container_name: Application_Server_2
    build:
      dockerfile: ./Application Server/Dockerfile_for_Compose
    volumes:
      - ./Application Server:/application_server_2/src
    networks:
      distr_network:
        ipv4_address: 177.17.0.21
    ports:
      - '5002:80'
    depends_on:
      - application_server_1

  application_server_3:
    container_name: Application_Server_3
    build:
      dockerfile: ./Application Server/Dockerfile_for_Compose
    volumes:
      - ./Application Server:/application_server_3/src
    networks:
      distr_network:
        ipv4_address: 177.17.0.22
    ports:
      - '5003:80'
    depends_on:
      - application_server_2

  load_balancer_1:
    container_name: Load_Balancer_1
    build:
      dockerfile: ./Load Balancer/Dockerfile_for_Compose
    volumes:
      - ./Load Balancer:/load_balancer_1/src
    networks:
      distr_network:
        ipv4_address: 177.17.0.70
    ports:
      - '7001:80'
    depends_on:
      - application_server_3

  load_balancer_2:
    container_name: Load_Balancer_2
    build:
      dockerfile: ./Load Balancer/Dockerfile_for_Compose
    volumes:
      - ./Load Balancer:/load_balancer_2/src
    networks:
      distr_network:
        ipv4_address: 177.17.0.71
    ports:
      - '7002:80'
    depends_on:
      - load_balancer_1

  load_balancer_3:
    container_name: Load_Balancer_3
    build:
      dockerfile: ./Load Balancer/Dockerfile_for_Compose
    volumes:
      - ./Load Balancer:/load_balancer_3/src
    networks:
      distr_network:
        ipv4_address: 177.17.0.72
    ports:
      - '7003:80'
    depends_on:
      - load_balancer_2

  frontend:
    container_name: Frontend
    build:
      dockerfile: ./Frontend/Dockerfile
    volumes:
      - ./Frontend:/frontend_1/src
    networks:
      distr_network:
        ipv4_address: 177.17.0.10
    ports:
      - '3001:3001'
    depends_on:
      - load_balancer_3

  redis_cluster:
      container_name: Backplane_Cluster_Starter
      image: 'redis:7.0.8'
      command: bash -c "redis-cli --cluster create 177.17.0.31:6371 177.17.0.32:6372 177.17.0.33:6373 --cluster-replicas 0 --cluster-yes" #&& trap ':' TERM INT; sleep infinity & wait"
      #&& sleep 10 && redis-cli --cluster call 177.17.0.31:6371 CLUSTER NODES
      tty: true
      networks:
        distr_network:
          ipv4_address: 177.17.0.30
      depends_on:
        - redis_node_3

  redis_node_1:
      container_name: Backplane_1
      image: 'redis:7.0.8'
      command: redis-server /usr/local/etc/redis/redis.conf
      ports:
        - '6371:6371'
      volumes:
        - redis_node_1-data:/var/lib/redis
        - ./Backplane/Cluster/redis_node_1.conf:/usr/local/etc/redis/redis.conf
      networks:
        distr_network:
          ipv4_address: 177.17.0.31
  redis_node_2:
      container_name: Backplane_2
      image: 'redis:7.0.8'
      command: redis-server /usr/local/etc/redis/redis.conf
      ports:
        - '6372:6372'
      volumes:
        - redis_node_2-data:/var/lib/redis
        - ./Backplane/Cluster/redis_node_2.conf:/usr/local/etc/redis/redis.conf
      networks:
        distr_network:
          ipv4_address: 177.17.0.32
      depends_on:
        - redis_node_1
  redis_node_3:
      container_name: Backplane_3
      image: 'redis:7.0.8'
      command: redis-server /usr/local/etc/redis/redis.conf
      ports:
        - '6373:6373'
      volumes:
        - redis_node_3-data:/var/lib/redis
        - ./Backplane/Cluster/redis_node_3.conf:/usr/local/etc/redis/redis.conf
      networks:
        distr_network:
          ipv4_address: 177.17.0.33
      depends_on:
        - redis_node_2

volumes:
  frontend_1:
  application_server_1:
  application_server_2:
  application_server_3:
  load_balancer_1:
  load_balancer_2:
  load_balancer_3:
  redis_node_1-data:
  redis_node_2-data:
  redis_node_3-data:

networks:
  distr_network:
    external: true
    driver: bridge
    ipam:
      config:
        - subnet: 177.17.0.0/16
